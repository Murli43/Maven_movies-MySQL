-- Q1. Retrieve the total number of rentals made in the maven_movies database. 
SELECT  COUNT(*) total_rentals FROM rental


-- Q2.Find the average rental duration (in days) of movies rented from the database. 
SELECT ROUND(AVG(rental_duration),0) avg_rental_duration FROM film


-- Q3.Display the first name and last name of customers in uppercase.
SELECT UPPER(first_name) AS FIRST_NAME,
    UPPER(last_name) AS LAST_NAME 

        FROM customer

-- Q4.Extract the month from the rental date and display it alongside the rental ID.
SELECT rental_id,
     MONTH(rental_date) AS rental_month 
FROM rental

-- Q5.Retrieve the Count of rentals for each customer (display customer ID and the count of rentals)
SELECT customer_id, 
    COUNT(rental_id) AS rental_count
FROM rental
GROUP BY customer_id

-- Q6.Find the total revenue generated by each store.
SELECT 
    s.store_id, 
        SUM(p.amount) AS total_revenue
FROM 
    payment AS p 
JOIN customer AS c  ON p.customer_id = c.customer_id
JOIN store AS s     ON c.store_id = s.store_id
GROUP BY 
    s.store_id

-- Q7.Determine the total number of rentals for each category of movies
SELECT 
    c.name AS Category_name, 
        COUNT(r.rental_id) AS total_rentals
FROM 
    rental AS r
JOIN inventory AS i ON r.inventory_id = i.inventory_id
JOIN film AS f ON i.film_id = f.film_id 
JOIN film_category as fc ON f.film_id = fc.film_id 
JOIN category AS c ON fc.category_id = c.category_id
GROUP BY 
    Category_name


-- Q8.Find the average rental rate of movies in each language.
SELECT 
    l.name AS language_name, 
        ROUND(AVG(f.rental_rate),2) AS average_rates
FROM 
    film AS f 
JOIN language AS l ON f.language_id = l.language_id
GROUP BY 
    language_name


-- Q9.Display the top 5 rented movies along with the number of times they've been rented.
SELECT 
    f.title AS movie_names, 
        COUNT(r.rental_id) AS rental_counts
FROM 
    rental AS r 
JOIN inventory  AS i ON r.inventory_id = i.inventory_id
JOIN film AS f ON i.film_id = f.film_id
GROUP BY 
    movie_names
ORDER BY 
    rental_counts DESC 
LIMIT 5


-- Q10.Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT DISTINCT 
    c.customer_id, 
    c.first_name, 
    c.last_name
FROM 
    rental AS r 
JOIN customer AS c ON c.customer_id = r.customer_id
WHERE 
    store_id IN (1,2)


-- Q11.Rank the customers based on the total amount they've spent on rentals.
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
        SUM(p.amount) AS Total_spent,
RANK() OVER(ORDER BY SUM(p.amount) DESC) AS ranked
FROM 
    customer AS c 
JOIN payment AS p ON c.customer_id = p.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name


-- Q12. Calculate the cumulative revenue generated by each film over time.
SELECT 
    f.title, 
    r.rental_date, 
        SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS cumulative_revenue 
FROM 
    film f 
JOIN inventory i ON f.film_id = i.film_id 
JOIN rental r ON i.inventory_id = r.inventory_id 
JOIN payment p ON r.rental_id = p.rental_id


--Q13. Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    c.name AS category_name, 
        COUNT(r.rental_id) AS rental_count, 
            SUM(COUNT(r.rental_id)) OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id)) AS running_total 
FROM category c 
JOIN film_category fc ON c.category_id = fc.category_id 
JOIN film f ON fc.film_id = f.film_id 
JOIN inventory i ON f.film_id = i.film_id 
JOIN rental r ON i.inventory_id = r.inventory_id 
GROUP BY 
    c.name, 
    f.title



-- Q14.Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
    month, 
    year, 
    monthly_revenue 
        FROM ( SELECT MONTH(r.rental_date) AS month, YEAR(r.rental_date) AS year, 
                SUM(p.amount) AS monthly_revenue, 
                        RANK() OVER (ORDER BY SUM(p.amount) DESC) AS ranked 
                            FROM rental r 
                            JOIN payment p ON r.rental_id = p.rental_id 
                            GROUP BY 
                                YEAR(r.rental_date),
                                MONTH(r.rental_date) ) ranked_months WHERE ranked <= 5;












































